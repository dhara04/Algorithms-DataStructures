/*http://www.geeksforgeeks.org/depth-first-traversal-for-a-graph/*/

#include <iostream>
#include <list>

using namespace std;

class Graph
{
	int N;
	list<int>* adj;

public:
	Graph(int N);
	void addEdge(int v, int w);
	void DFS(int s);
	void DFSUtil(int, bool vis[]);
};

Graph::Graph(int n)
{
	this->N = n;
	adj = new list<int>[N];
}

void Graph::addEdge(int v, int w) {
	adj[v].push_back(w);
}

void Graph::DFSUtil(int v, bool visited[]) {
	
	list<int>::iterator i;
	visited[v] = true;
	cout << v << " ";

	for(i = adj[v].begin(); i != adj[v].end(); i++)
	{
		if (!visited[*i])
			DFSUtil(*i, visited);
	}
}
void Graph::DFS(int s) {
	bool* visited = new bool[N];
	for (int i = 0; i < N; i++)
		visited[i] = false;

	if (!visited[s])
		DFSUtil(s, visited);
	

}

int main()
{
	// Create a graph given in the above diagram
	Graph g(4);
	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(1, 2);
	g.addEdge(2, 0);
	g.addEdge(2, 3);
	g.addEdge(3, 3);

	cout << "Following is Depth First Traversal "
		<< "(starting from vertex 2) \n";
	g.DFS(2);
	cin.get();

	return 0;
}
